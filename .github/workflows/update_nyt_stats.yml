name: Update NYT Puzzle Stats

on:
  schedule:
    # Run daily at 9:00 AM UTC (adjust time as needed)
    - cron: "0 9 * * *"
  workflow_dispatch: # Allow manual trigger

jobs:
  update-stats:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Update NYT Stats
        env:
          NYT_COOKIE: ${{ secrets.NYT_COOKIE }}
        run: |
          python nyt_stats.py

      - name: Checkout profile repository
        uses: actions/checkout@v4
        with:
          repository: mpartificer/mpartificer
          path: profile-repo
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ref: main

      - name: Configure git for profile repo
        run: |
          cd profile-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          echo "Current remote URL:"
          git remote -v
          echo "Setting remote URL with token..."
          git remote set-url origin https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/mpartificer/mpartificer.git
          echo "New remote URL:"
          git remote -v

      - name: Create and run update script
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          # Install GitHub CLI
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          apt-get update
          apt-get install gh -y

          # Authenticate with GitHub CLI
          echo "$PERSONAL_ACCESS_TOKEN" | gh auth login --with-token

          cat > update_profile.py << 'EOF'
          import re
          import os
          import subprocess

          def update_profile_readme():
              """Update profile README with NYT stats"""
              # Define paths
              source_readme = 'README.md'
              target_readme = 'profile-repo/README.md'
              
              # Define markers
              start_marker = "<!-- NYT_STATS_START -->"
              end_marker = "<!-- NYT_STATS_END -->"
              
              # Read source README (the one with fresh stats)
              with open(source_readme, 'r') as f:
                  source_content = f.read()
              
              # Extract stats content
              stats_pattern = re.compile(f"{start_marker}.*?{end_marker}", re.DOTALL)
              stats_match = stats_pattern.search(source_content)
              
              if not stats_match:
                  print("Could not find stats markers in source README")
                  return False
                  
              stats_content = stats_match.group(0)
              print(f"Found stats content: {stats_content[:100]}...")
              
              # Check if target README exists
              if not os.path.exists(target_readme):
                  print("Profile README doesn't exist, creating it")
                  with open(target_readme, 'w') as f:
                      f.write(f"# My GitHub Profile\n\n{stats_content}\n")
                  return True
              
              # Read target README (profile README)
              with open(target_readme, 'r') as f:
                  profile_content = f.read()
              
              print(f"Current profile content: {profile_content[:100]}...")
              
              # Update or append stats
              if start_marker in profile_content:
                  print("Updating existing stats in profile README")
                  updated_content = stats_pattern.sub(stats_content, profile_content)
              else:
                  print("Adding stats to profile README")
                  updated_content = f"{profile_content}\n\n{stats_content}\n"
              
              # Write updated content
              with open(target_readme, 'w') as f:
                  f.write(updated_content)
              
              print(f"Updated profile content: {updated_content[:100]}...")
              
              # Git operations
              os.chdir('profile-repo')
              
              # Configure git
              subprocess.run(['git', 'config', 'user.name', 'github-actions[bot]'])
              subprocess.run(['git', 'config', 'user.email', 'github-actions[bot]@users.noreply.github.com'])
              
              # Add and commit
              subprocess.run(['git', 'add', 'README.md'])
              
              # Check if there are changes to commit
              result = subprocess.run(['git', 'diff', '--staged', '--quiet'], capture_output=True)
              if result.returncode == 1:  # Changes detected
                  print("Changes detected, committing...")
                  subprocess.run(['git', 'commit', '-m', 'Update NYT puzzle stats'])
                  
                  # Push using GitHub CLI
                  print("Pushing changes using GitHub CLI...")
                  push_result = subprocess.run(['gh', 'repo', 'sync', 'mpartificer/mpartificer'], capture_output=True, text=True)
                  print(f"Push stdout: {push_result.stdout}")
                  print(f"Push stderr: {push_result.stderr}")
                  print(f"Push return code: {push_result.returncode}")
                  
                  if push_result.returncode == 0:
                      print("Changes pushed to profile repository")
                      return True
                  else:
                      print("Push failed!")
                      return False
              else:
                  print("No changes to commit")
                  return False

          if __name__ == "__main__":
              update_profile_readme()
          EOF

          python update_profile.py
