name: Update NYT Puzzle Stats

on:
  schedule:
    # Run daily at 9:00 AM UTC (adjust time as needed)
    - cron: "0 9 * * *"
  workflow_dispatch: # Allow manual trigger

jobs:
  update-stats:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Update NYT Stats
        env:
          NYT_COOKIE: ${{ secrets.NYT_COOKIE }}
        run: |
          python nyt_stats.py

      - name: Checkout profile repository
        uses: actions/checkout@v4
        with:
          repository: mpartificer/mpartificer
          path: profile-repo
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ref: main

      - name: Configure git for profile repo
        run: |
          cd profile-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          echo "Current remote URL:"
          git remote -v
          echo "Setting remote URL with token..."
          git remote set-url origin https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/mpartificer/mpartificer.git
          echo "New remote URL:"
          git remote -v

      - name: Create and run update script
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          cat > update_profile.py << 'EOF'
          import re
          import os
          import subprocess
          import requests
          import base64

          def update_profile_readme():
              """Update profile README with NYT stats using GitHub API"""
              # Define paths
              source_readme = 'README.md'
              target_readme = 'profile-repo/README.md'
              
              # Define markers
              start_marker = "<!-- NYT_STATS_START -->"
              end_marker = "<!-- NYT_STATS_END -->"
              
              # Read source README (the one with fresh stats)
              with open(source_readme, 'r') as f:
                  source_content = f.read()
              
              # Extract stats content
              stats_pattern = re.compile(f"{start_marker}.*?{end_marker}", re.DOTALL)
              stats_match = stats_pattern.search(source_content)
              
              if not stats_match:
                  print("Could not find stats markers in source README")
                  return False
                  
              stats_content = stats_match.group(0)
              print(f"Found stats content: {stats_content[:100]}...")
              
              # Read target README (profile README)
              with open(target_readme, 'r') as f:
                  profile_content = f.read()
              
              print(f"Current profile content: {profile_content[:100]}...")
              
              # Update or append stats
              if start_marker in profile_content:
                  print("Updating existing stats in profile README")
                  updated_content = stats_pattern.sub(stats_content, profile_content)
              else:
                  print("Adding stats to profile README")
                  updated_content = f"{profile_content}\\n\\n{stats_content}\\n"
              
              print(f"Updated profile content: {updated_content[:100]}...")
              
              # Update via GitHub API
              token = os.environ.get('PERSONAL_ACCESS_TOKEN')
              if not token:
                  print("PERSONAL_ACCESS_TOKEN not found in environment")
                  return False
              
              # Get current file info
              headers = {
                  'Authorization': f'token {token}',
                  'Accept': 'application/vnd.github.v3+json'
              }
              
              # Get current README content
              api_url = 'https://api.github.com/repos/mpartificer/mpartificer/contents/README.md'
              response = requests.get(api_url, headers=headers)
              
              if response.status_code == 200:
                  current_file = response.json()
                  current_sha = current_file['sha']
                  print(f"Current file SHA: {current_sha}")
                  
                  # Update the file
                  update_data = {
                      'message': 'Update NYT puzzle stats',
                      'content': base64.b64encode(updated_content.encode()).decode(),
                      'sha': current_sha,
                      'branch': 'main'
                  }
                  
                  update_response = requests.put(api_url, headers=headers, json=update_data)
                  
                  if update_response.status_code == 200:
                      print("Successfully updated profile README via API")
                      return True
                  else:
                      print(f"API update failed: {update_response.status_code}")
                      print(f"Response: {update_response.text}")
                      return False
              else:
                  print(f"Failed to get current file: {response.status_code}")
                  print(f"Response: {response.text}")
                  return False

          if __name__ == "__main__":
              update_profile_readme()
          EOF

          python update_profile.py
